{"name": "test_add1[42051]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@id='app']/div/div[2]/section/div/div[2]/div[3]/table/tbody/tr[1]/td[2]/div\"}\n  (Session info: chrome=103.0.5060.114)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00B26463+2188387]\n\tOrdinal0 [0x00ABE461+1762401]\n\tOrdinal0 [0x009D3D78+802168]\n\tOrdinal0 [0x00A01880+989312]\n\tOrdinal0 [0x00A01B1B+989979]\n\tOrdinal0 [0x00A2E912+1173778]\n\tOrdinal0 [0x00A1C824+1099812]\n\tOrdinal0 [0x00A2CC22+1166370]\n\tOrdinal0 [0x00A1C5F6+1099254]\n\tOrdinal0 [0x009F6BE0+945120]\n\tOrdinal0 [0x009F7AD6+948950]\n\tGetHandleVerifier [0x00DC71F2+2712546]\n\tGetHandleVerifier [0x00DB886D+2652765]\n\tGetHandleVerifier [0x00BB002A+520730]\n\tGetHandleVerifier [0x00BAEE06+516086]\n\tOrdinal0 [0x00AC468B+1787531]\n\tOrdinal0 [0x00AC8E88+1805960]\n\tOrdinal0 [0x00AC8F75+1806197]\n\tOrdinal0 [0x00AD1DF1+1842673]\n\tBaseThreadInitThunk [0x77A8FA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77C575F4+228]\n\tRtlGetAppContainerNamedObjectPath [0x77C575C4+180]", "trace": "self = <itsm.test_case.test_run.TestItsm object at 0x0000000003F386D0>, name = '4205'\n\n    @pytest.mark.parametrize(\"name\",[f\"{num}\",f\"{num}\",f\"{num}\"])\n    def test_add1(self,name):\n>       list_page = self.home\\\n            .go_to_requestlist()\\\n            .go_to_newrequest()\\\n            .new_request(name)\\\n            .get_add_title()\n\ntest_run.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\page\\request_list_page.py:34: in get_add_title\n    ele = self.do_find(self.__MENU_TITLE)\n..\\base\\base_page.py:35: in do_find\n    return self.driver.find_element(*by)\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:857: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:435: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000000003F38C10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C575F4+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C575C4+180]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@id='app']/div/div[2]/section/div/div[2]/div[3]/table/tbody/tr[1]/td[2]/div\"}\nE         (Session info: chrome=103.0.5060.114)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00B26463+2188387]\nE       \tOrdinal0 [0x00ABE461+1762401]\nE       \tOrdinal0 [0x009D3D78+802168]\nE       \tOrdinal0 [0x00A01880+989312]\nE       \tOrdinal0 [0x00A01B1B+989979]\nE       \tOrdinal0 [0x00A2E912+1173778]\nE       \tOrdinal0 [0x00A1C824+1099812]\nE       \tOrdinal0 [0x00A2CC22+1166370]\nE       \tOrdinal0 [0x00A1C5F6+1099254]\nE       \tOrdinal0 [0x009F6BE0+945120]\nE       \tOrdinal0 [0x009F7AD6+948950]\nE       \tGetHandleVerifier [0x00DC71F2+2712546]\nE       \tGetHandleVerifier [0x00DB886D+2652765]\nE       \tGetHandleVerifier [0x00BB002A+520730]\nE       \tGetHandleVerifier [0x00BAEE06+516086]\nE       \tOrdinal0 [0x00AC468B+1787531]\nE       \tOrdinal0 [0x00AC8E88+1805960]\nE       \tOrdinal0 [0x00AC8F75+1806197]\nE       \tOrdinal0 [0x00AD1DF1+1842673]\nE       \tBaseThreadInitThunk [0x77A8FA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C575F4+228]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C575C4+180]\n\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: NoSuchElementException"}, "attachments": [{"name": "log", "source": "fcdfe1c9-2ca2-4080-b62e-eda123c59f65-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "e8a9c381-af53-4766-8c74-5770b5c4e759-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "name", "value": "'4205'"}], "start": 1658367343036, "stop": 1658367356048, "uuid": "23e83612-3106-48bb-9df2-ef7a0e6f761f", "historyId": "95fcb5bf9f8d7a19b868f33a25994d87", "testCaseId": "986b1b1039b0a93928ac79d47ea91897", "fullName": "test_run.TestItsm#test_add1", "labels": [{"name": "suite", "value": "test_run"}, {"name": "subSuite", "value": "TestItsm"}, {"name": "host", "value": "houjinzhu-gm"}, {"name": "thread", "value": "21984-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_run"}]}